# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import dlt_gateway_pb2 as dlt__gateway__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2

GRPC_GENERATED_VERSION = '1.73.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in dlt_gateway_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class DltGatewayServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RegisterUser = channel.unary_unary(
                '/dlt.DltGatewayService/RegisterUser',
                request_serializer=dlt__gateway__pb2.NewUser.SerializeToString,
                response_deserializer=dlt__gateway__pb2.Response.FromString,
                _registered_method=True)
        self.RegisterUserEquipment = channel.unary_unary(
                '/dlt.DltGatewayService/RegisterUserEquipment',
                request_serializer=dlt__gateway__pb2.NewUser.SerializeToString,
                response_deserializer=dlt__gateway__pb2.Response.FromString,
                _registered_method=True)
        self.CreateProvider = channel.unary_unary(
                '/dlt.DltGatewayService/CreateProvider',
                request_serializer=dlt__gateway__pb2.Request.SerializeToString,
                response_deserializer=dlt__gateway__pb2.Response.FromString,
                _registered_method=True)
        self.UpdateProvider = channel.unary_unary(
                '/dlt.DltGatewayService/UpdateProvider',
                request_serializer=dlt__gateway__pb2.Provider.SerializeToString,
                response_deserializer=dlt__gateway__pb2.Response.FromString,
                _registered_method=True)
        self.GetProvider = channel.unary_unary(
                '/dlt.DltGatewayService/GetProvider',
                request_serializer=dlt__gateway__pb2.Request.SerializeToString,
                response_deserializer=dlt__gateway__pb2.Response.FromString,
                _registered_method=True)
        self.ListProvider = channel.unary_unary(
                '/dlt.DltGatewayService/ListProvider',
                request_serializer=dlt__gateway__pb2.Request.SerializeToString,
                response_deserializer=dlt__gateway__pb2.Response.FromString,
                _registered_method=True)
        self.DeleteProvider = channel.unary_unary(
                '/dlt.DltGatewayService/DeleteProvider',
                request_serializer=dlt__gateway__pb2.Request.SerializeToString,
                response_deserializer=dlt__gateway__pb2.Response.FromString,
                _registered_method=True)
        self.CreateService = channel.unary_unary(
                '/dlt.DltGatewayService/CreateService',
                request_serializer=dlt__gateway__pb2.Request.SerializeToString,
                response_deserializer=dlt__gateway__pb2.Response.FromString,
                _registered_method=True)
        self.GetService = channel.unary_unary(
                '/dlt.DltGatewayService/GetService',
                request_serializer=dlt__gateway__pb2.Request.SerializeToString,
                response_deserializer=dlt__gateway__pb2.Response.FromString,
                _registered_method=True)
        self.ListService = channel.unary_unary(
                '/dlt.DltGatewayService/ListService',
                request_serializer=dlt__gateway__pb2.Request.SerializeToString,
                response_deserializer=dlt__gateway__pb2.Response.FromString,
                _registered_method=True)
        self.UpdateService = channel.unary_unary(
                '/dlt.DltGatewayService/UpdateService',
                request_serializer=dlt__gateway__pb2.Service.SerializeToString,
                response_deserializer=dlt__gateway__pb2.Response.FromString,
                _registered_method=True)
        self.DeleteService = channel.unary_unary(
                '/dlt.DltGatewayService/DeleteService',
                request_serializer=dlt__gateway__pb2.Request.SerializeToString,
                response_deserializer=dlt__gateway__pb2.Response.FromString,
                _registered_method=True)
        self.CreateSearch = channel.unary_unary(
                '/dlt.DltGatewayService/CreateSearch',
                request_serializer=dlt__gateway__pb2.Request.SerializeToString,
                response_deserializer=dlt__gateway__pb2.Response.FromString,
                _registered_method=True)
        self.GetSearch = channel.unary_unary(
                '/dlt.DltGatewayService/GetSearch',
                request_serializer=dlt__gateway__pb2.Request.SerializeToString,
                response_deserializer=dlt__gateway__pb2.Response.FromString,
                _registered_method=True)
        self.InitSLA = channel.unary_unary(
                '/dlt.DltGatewayService/InitSLA',
                request_serializer=dlt__gateway__pb2.SLA.SerializeToString,
                response_deserializer=dlt__gateway__pb2.Response.FromString,
                _registered_method=True)
        self.GetSLA = channel.unary_unary(
                '/dlt.DltGatewayService/GetSLA',
                request_serializer=dlt__gateway__pb2.Request.SerializeToString,
                response_deserializer=dlt__gateway__pb2.Response.FromString,
                _registered_method=True)
        self.GetSLAByConsumerId = channel.unary_unary(
                '/dlt.DltGatewayService/GetSLAByConsumerId',
                request_serializer=dlt__gateway__pb2.Request.SerializeToString,
                response_deserializer=dlt__gateway__pb2.Response.FromString,
                _registered_method=True)
        self.SlaSign = channel.unary_unary(
                '/dlt.DltGatewayService/SlaSign',
                request_serializer=dlt__gateway__pb2.Request.SerializeToString,
                response_deserializer=dlt__gateway__pb2.Response.FromString,
                _registered_method=True)
        self.SubscribeToSLAInit = channel.unary_stream(
                '/dlt.DltGatewayService/SubscribeToSLAInit',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=dlt__gateway__pb2.DltRecordEvent.FromString,
                _registered_method=True)
        self.SubscribeToSLASigning = channel.unary_stream(
                '/dlt.DltGatewayService/SubscribeToSLASigning',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=dlt__gateway__pb2.DltRecordEvent.FromString,
                _registered_method=True)
        self.CreateDID = channel.unary_unary(
                '/dlt.DltGatewayService/CreateDID',
                request_serializer=dlt__gateway__pb2.Request.SerializeToString,
                response_deserializer=dlt__gateway__pb2.Response.FromString,
                _registered_method=True)
        self.RegisterDID = channel.unary_unary(
                '/dlt.DltGatewayService/RegisterDID',
                request_serializer=dlt__gateway__pb2.DID.SerializeToString,
                response_deserializer=dlt__gateway__pb2.Response.FromString,
                _registered_method=True)
        self.SignMessage = channel.unary_unary(
                '/dlt.DltGatewayService/SignMessage',
                request_serializer=dlt__gateway__pb2.SignMessageReq.SerializeToString,
                response_deserializer=dlt__gateway__pb2.SignMessageResp.FromString,
                _registered_method=True)
        self.VerifyMessage = channel.unary_unary(
                '/dlt.DltGatewayService/VerifyMessage',
                request_serializer=dlt__gateway__pb2.VerifyMessageReq.SerializeToString,
                response_deserializer=dlt__gateway__pb2.VerificationResult.FromString,
                _registered_method=True)
        self.ListDIDs = channel.unary_unary(
                '/dlt.DltGatewayService/ListDIDs',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=dlt__gateway__pb2.Response.FromString,
                _registered_method=True)
        self.ListCredentials = channel.unary_unary(
                '/dlt.DltGatewayService/ListCredentials',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=dlt__gateway__pb2.Response.FromString,
                _registered_method=True)
        self.LookupDID = channel.unary_unary(
                '/dlt.DltGatewayService/LookupDID',
                request_serializer=dlt__gateway__pb2.Request.SerializeToString,
                response_deserializer=dlt__gateway__pb2.Response.FromString,
                _registered_method=True)
        self.ShowCredential = channel.unary_unary(
                '/dlt.DltGatewayService/ShowCredential',
                request_serializer=dlt__gateway__pb2.Request.SerializeToString,
                response_deserializer=dlt__gateway__pb2.Response.FromString,
                _registered_method=True)
        self.CreateCredential = channel.unary_unary(
                '/dlt.DltGatewayService/CreateCredential',
                request_serializer=dlt__gateway__pb2.CredentialParam.SerializeToString,
                response_deserializer=dlt__gateway__pb2.Credential.FromString,
                _registered_method=True)
        self.RevokeCredential = channel.unary_unary(
                '/dlt.DltGatewayService/RevokeCredential',
                request_serializer=dlt__gateway__pb2.Request.SerializeToString,
                response_deserializer=dlt__gateway__pb2.Response.FromString,
                _registered_method=True)
        self.RequestCredential = channel.unary_unary(
                '/dlt.DltGatewayService/RequestCredential',
                request_serializer=dlt__gateway__pb2.CredentialRequest.SerializeToString,
                response_deserializer=dlt__gateway__pb2.Credential.FromString,
                _registered_method=True)
        self.CreatePresentation = channel.unary_unary(
                '/dlt.DltGatewayService/CreatePresentation',
                request_serializer=dlt__gateway__pb2.PresentationParam.SerializeToString,
                response_deserializer=dlt__gateway__pb2.Response.FromString,
                _registered_method=True)
        self.RequestAuthorization = channel.unary_unary(
                '/dlt.DltGatewayService/RequestAuthorization',
                request_serializer=dlt__gateway__pb2.AuthorizationRequest.SerializeToString,
                response_deserializer=dlt__gateway__pb2.VerificationResult.FromString,
                _registered_method=True)
        self.GetNonce = channel.unary_unary(
                '/dlt.DltGatewayService/GetNonce',
                request_serializer=dlt__gateway__pb2.Request.SerializeToString,
                response_deserializer=dlt__gateway__pb2.Response.FromString,
                _registered_method=True)
        self.VerifyCredential = channel.unary_unary(
                '/dlt.DltGatewayService/VerifyCredential',
                request_serializer=dlt__gateway__pb2.Request.SerializeToString,
                response_deserializer=dlt__gateway__pb2.VerificationResult.FromString,
                _registered_method=True)
        self.ListAuthorizationResults = channel.unary_unary(
                '/dlt.DltGatewayService/ListAuthorizationResults',
                request_serializer=dlt__gateway__pb2.Request.SerializeToString,
                response_deserializer=dlt__gateway__pb2.Response.FromString,
                _registered_method=True)
        self.FindLatestAuthorizationResult = channel.unary_unary(
                '/dlt.DltGatewayService/FindLatestAuthorizationResult',
                request_serializer=dlt__gateway__pb2.Request.SerializeToString,
                response_deserializer=dlt__gateway__pb2.Response.FromString,
                _registered_method=True)


class DltGatewayServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def RegisterUser(self, request, context):
        """Registering user, returns the content of the the .id file for accessing to the blockchain
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RegisterUserEquipment(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateProvider(self, request, context):
        """MarketPlace
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateProvider(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetProvider(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListProvider(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteProvider(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateService(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetService(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListService(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateService(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteService(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateSearch(self, request, context):
        """Search Component

        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSearch(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def InitSLA(self, request, context):
        """SLA registry
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSLA(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSLAByConsumerId(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SlaSign(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeToSLAInit(self, request, context):
        """Event Subscriber
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeToSLASigning(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateDID(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RegisterDID(self, request, context):
        """Register the DID on the blockchain
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SignMessage(self, request, context):
        """Request to the wallet to sign a message
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VerifyMessage(self, request, context):
        """Request to the wallet to verify a message
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListDIDs(self, request, context):
        """Return a list of DIDs saved in the wallet
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListCredentials(self, request, context):
        """Return a list of credentials overviews that are saved in the wallet
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LookupDID(self, request, context):
        """Look up the DID Document in the registry
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ShowCredential(self, request, context):
        """Return the full credential in the wallet
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateCredential(self, request, context):
        """-- Issuer --
        Request to the issuer wallet to issue a credential
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RevokeCredential(self, request, context):
        """Request to the issuer wallet to revoke a credential
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RequestCredential(self, request, context):
        """-- Holder --
        Request to the holder wallet to request a VC from an issuer
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreatePresentation(self, request, context):
        """Request to the holder wallet to generate a VP
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RequestAuthorization(self, request, context):
        """Request to the holder wallet to request authorization from a verifier
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetNonce(self, request, context):
        """-- Verifier --
        Request to the verifier wallet for a nonce used for generating VP
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VerifyCredential(self, request, context):
        """Request to the verifier wallet to verify the VP over a VC
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListAuthorizationResults(self, request, context):
        """Return the VP verification results that matches the MongoDB filter string specified in request
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FindLatestAuthorizationResult(self, request, context):
        """Return the latest VP verification result matches the MongoDB filter string specified in request
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DltGatewayServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RegisterUser': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterUser,
                    request_deserializer=dlt__gateway__pb2.NewUser.FromString,
                    response_serializer=dlt__gateway__pb2.Response.SerializeToString,
            ),
            'RegisterUserEquipment': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterUserEquipment,
                    request_deserializer=dlt__gateway__pb2.NewUser.FromString,
                    response_serializer=dlt__gateway__pb2.Response.SerializeToString,
            ),
            'CreateProvider': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateProvider,
                    request_deserializer=dlt__gateway__pb2.Request.FromString,
                    response_serializer=dlt__gateway__pb2.Response.SerializeToString,
            ),
            'UpdateProvider': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateProvider,
                    request_deserializer=dlt__gateway__pb2.Provider.FromString,
                    response_serializer=dlt__gateway__pb2.Response.SerializeToString,
            ),
            'GetProvider': grpc.unary_unary_rpc_method_handler(
                    servicer.GetProvider,
                    request_deserializer=dlt__gateway__pb2.Request.FromString,
                    response_serializer=dlt__gateway__pb2.Response.SerializeToString,
            ),
            'ListProvider': grpc.unary_unary_rpc_method_handler(
                    servicer.ListProvider,
                    request_deserializer=dlt__gateway__pb2.Request.FromString,
                    response_serializer=dlt__gateway__pb2.Response.SerializeToString,
            ),
            'DeleteProvider': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteProvider,
                    request_deserializer=dlt__gateway__pb2.Request.FromString,
                    response_serializer=dlt__gateway__pb2.Response.SerializeToString,
            ),
            'CreateService': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateService,
                    request_deserializer=dlt__gateway__pb2.Request.FromString,
                    response_serializer=dlt__gateway__pb2.Response.SerializeToString,
            ),
            'GetService': grpc.unary_unary_rpc_method_handler(
                    servicer.GetService,
                    request_deserializer=dlt__gateway__pb2.Request.FromString,
                    response_serializer=dlt__gateway__pb2.Response.SerializeToString,
            ),
            'ListService': grpc.unary_unary_rpc_method_handler(
                    servicer.ListService,
                    request_deserializer=dlt__gateway__pb2.Request.FromString,
                    response_serializer=dlt__gateway__pb2.Response.SerializeToString,
            ),
            'UpdateService': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateService,
                    request_deserializer=dlt__gateway__pb2.Service.FromString,
                    response_serializer=dlt__gateway__pb2.Response.SerializeToString,
            ),
            'DeleteService': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteService,
                    request_deserializer=dlt__gateway__pb2.Request.FromString,
                    response_serializer=dlt__gateway__pb2.Response.SerializeToString,
            ),
            'CreateSearch': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateSearch,
                    request_deserializer=dlt__gateway__pb2.Request.FromString,
                    response_serializer=dlt__gateway__pb2.Response.SerializeToString,
            ),
            'GetSearch': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSearch,
                    request_deserializer=dlt__gateway__pb2.Request.FromString,
                    response_serializer=dlt__gateway__pb2.Response.SerializeToString,
            ),
            'InitSLA': grpc.unary_unary_rpc_method_handler(
                    servicer.InitSLA,
                    request_deserializer=dlt__gateway__pb2.SLA.FromString,
                    response_serializer=dlt__gateway__pb2.Response.SerializeToString,
            ),
            'GetSLA': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSLA,
                    request_deserializer=dlt__gateway__pb2.Request.FromString,
                    response_serializer=dlt__gateway__pb2.Response.SerializeToString,
            ),
            'GetSLAByConsumerId': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSLAByConsumerId,
                    request_deserializer=dlt__gateway__pb2.Request.FromString,
                    response_serializer=dlt__gateway__pb2.Response.SerializeToString,
            ),
            'SlaSign': grpc.unary_unary_rpc_method_handler(
                    servicer.SlaSign,
                    request_deserializer=dlt__gateway__pb2.Request.FromString,
                    response_serializer=dlt__gateway__pb2.Response.SerializeToString,
            ),
            'SubscribeToSLAInit': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribeToSLAInit,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=dlt__gateway__pb2.DltRecordEvent.SerializeToString,
            ),
            'SubscribeToSLASigning': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribeToSLASigning,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=dlt__gateway__pb2.DltRecordEvent.SerializeToString,
            ),
            'CreateDID': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateDID,
                    request_deserializer=dlt__gateway__pb2.Request.FromString,
                    response_serializer=dlt__gateway__pb2.Response.SerializeToString,
            ),
            'RegisterDID': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterDID,
                    request_deserializer=dlt__gateway__pb2.DID.FromString,
                    response_serializer=dlt__gateway__pb2.Response.SerializeToString,
            ),
            'SignMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.SignMessage,
                    request_deserializer=dlt__gateway__pb2.SignMessageReq.FromString,
                    response_serializer=dlt__gateway__pb2.SignMessageResp.SerializeToString,
            ),
            'VerifyMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.VerifyMessage,
                    request_deserializer=dlt__gateway__pb2.VerifyMessageReq.FromString,
                    response_serializer=dlt__gateway__pb2.VerificationResult.SerializeToString,
            ),
            'ListDIDs': grpc.unary_unary_rpc_method_handler(
                    servicer.ListDIDs,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=dlt__gateway__pb2.Response.SerializeToString,
            ),
            'ListCredentials': grpc.unary_unary_rpc_method_handler(
                    servicer.ListCredentials,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=dlt__gateway__pb2.Response.SerializeToString,
            ),
            'LookupDID': grpc.unary_unary_rpc_method_handler(
                    servicer.LookupDID,
                    request_deserializer=dlt__gateway__pb2.Request.FromString,
                    response_serializer=dlt__gateway__pb2.Response.SerializeToString,
            ),
            'ShowCredential': grpc.unary_unary_rpc_method_handler(
                    servicer.ShowCredential,
                    request_deserializer=dlt__gateway__pb2.Request.FromString,
                    response_serializer=dlt__gateway__pb2.Response.SerializeToString,
            ),
            'CreateCredential': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateCredential,
                    request_deserializer=dlt__gateway__pb2.CredentialParam.FromString,
                    response_serializer=dlt__gateway__pb2.Credential.SerializeToString,
            ),
            'RevokeCredential': grpc.unary_unary_rpc_method_handler(
                    servicer.RevokeCredential,
                    request_deserializer=dlt__gateway__pb2.Request.FromString,
                    response_serializer=dlt__gateway__pb2.Response.SerializeToString,
            ),
            'RequestCredential': grpc.unary_unary_rpc_method_handler(
                    servicer.RequestCredential,
                    request_deserializer=dlt__gateway__pb2.CredentialRequest.FromString,
                    response_serializer=dlt__gateway__pb2.Credential.SerializeToString,
            ),
            'CreatePresentation': grpc.unary_unary_rpc_method_handler(
                    servicer.CreatePresentation,
                    request_deserializer=dlt__gateway__pb2.PresentationParam.FromString,
                    response_serializer=dlt__gateway__pb2.Response.SerializeToString,
            ),
            'RequestAuthorization': grpc.unary_unary_rpc_method_handler(
                    servicer.RequestAuthorization,
                    request_deserializer=dlt__gateway__pb2.AuthorizationRequest.FromString,
                    response_serializer=dlt__gateway__pb2.VerificationResult.SerializeToString,
            ),
            'GetNonce': grpc.unary_unary_rpc_method_handler(
                    servicer.GetNonce,
                    request_deserializer=dlt__gateway__pb2.Request.FromString,
                    response_serializer=dlt__gateway__pb2.Response.SerializeToString,
            ),
            'VerifyCredential': grpc.unary_unary_rpc_method_handler(
                    servicer.VerifyCredential,
                    request_deserializer=dlt__gateway__pb2.Request.FromString,
                    response_serializer=dlt__gateway__pb2.VerificationResult.SerializeToString,
            ),
            'ListAuthorizationResults': grpc.unary_unary_rpc_method_handler(
                    servicer.ListAuthorizationResults,
                    request_deserializer=dlt__gateway__pb2.Request.FromString,
                    response_serializer=dlt__gateway__pb2.Response.SerializeToString,
            ),
            'FindLatestAuthorizationResult': grpc.unary_unary_rpc_method_handler(
                    servicer.FindLatestAuthorizationResult,
                    request_deserializer=dlt__gateway__pb2.Request.FromString,
                    response_serializer=dlt__gateway__pb2.Response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'dlt.DltGatewayService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('dlt.DltGatewayService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class DltGatewayService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def RegisterUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dlt.DltGatewayService/RegisterUser',
            dlt__gateway__pb2.NewUser.SerializeToString,
            dlt__gateway__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RegisterUserEquipment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dlt.DltGatewayService/RegisterUserEquipment',
            dlt__gateway__pb2.NewUser.SerializeToString,
            dlt__gateway__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateProvider(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dlt.DltGatewayService/CreateProvider',
            dlt__gateway__pb2.Request.SerializeToString,
            dlt__gateway__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateProvider(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dlt.DltGatewayService/UpdateProvider',
            dlt__gateway__pb2.Provider.SerializeToString,
            dlt__gateway__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetProvider(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dlt.DltGatewayService/GetProvider',
            dlt__gateway__pb2.Request.SerializeToString,
            dlt__gateway__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListProvider(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dlt.DltGatewayService/ListProvider',
            dlt__gateway__pb2.Request.SerializeToString,
            dlt__gateway__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteProvider(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dlt.DltGatewayService/DeleteProvider',
            dlt__gateway__pb2.Request.SerializeToString,
            dlt__gateway__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateService(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dlt.DltGatewayService/CreateService',
            dlt__gateway__pb2.Request.SerializeToString,
            dlt__gateway__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetService(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dlt.DltGatewayService/GetService',
            dlt__gateway__pb2.Request.SerializeToString,
            dlt__gateway__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListService(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dlt.DltGatewayService/ListService',
            dlt__gateway__pb2.Request.SerializeToString,
            dlt__gateway__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateService(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dlt.DltGatewayService/UpdateService',
            dlt__gateway__pb2.Service.SerializeToString,
            dlt__gateway__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteService(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dlt.DltGatewayService/DeleteService',
            dlt__gateway__pb2.Request.SerializeToString,
            dlt__gateway__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateSearch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dlt.DltGatewayService/CreateSearch',
            dlt__gateway__pb2.Request.SerializeToString,
            dlt__gateway__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetSearch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dlt.DltGatewayService/GetSearch',
            dlt__gateway__pb2.Request.SerializeToString,
            dlt__gateway__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def InitSLA(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dlt.DltGatewayService/InitSLA',
            dlt__gateway__pb2.SLA.SerializeToString,
            dlt__gateway__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetSLA(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dlt.DltGatewayService/GetSLA',
            dlt__gateway__pb2.Request.SerializeToString,
            dlt__gateway__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetSLAByConsumerId(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dlt.DltGatewayService/GetSLAByConsumerId',
            dlt__gateway__pb2.Request.SerializeToString,
            dlt__gateway__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SlaSign(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dlt.DltGatewayService/SlaSign',
            dlt__gateway__pb2.Request.SerializeToString,
            dlt__gateway__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SubscribeToSLAInit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/dlt.DltGatewayService/SubscribeToSLAInit',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            dlt__gateway__pb2.DltRecordEvent.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SubscribeToSLASigning(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/dlt.DltGatewayService/SubscribeToSLASigning',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            dlt__gateway__pb2.DltRecordEvent.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateDID(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dlt.DltGatewayService/CreateDID',
            dlt__gateway__pb2.Request.SerializeToString,
            dlt__gateway__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RegisterDID(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dlt.DltGatewayService/RegisterDID',
            dlt__gateway__pb2.DID.SerializeToString,
            dlt__gateway__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SignMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dlt.DltGatewayService/SignMessage',
            dlt__gateway__pb2.SignMessageReq.SerializeToString,
            dlt__gateway__pb2.SignMessageResp.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def VerifyMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dlt.DltGatewayService/VerifyMessage',
            dlt__gateway__pb2.VerifyMessageReq.SerializeToString,
            dlt__gateway__pb2.VerificationResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListDIDs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dlt.DltGatewayService/ListDIDs',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            dlt__gateway__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListCredentials(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dlt.DltGatewayService/ListCredentials',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            dlt__gateway__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def LookupDID(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dlt.DltGatewayService/LookupDID',
            dlt__gateway__pb2.Request.SerializeToString,
            dlt__gateway__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ShowCredential(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dlt.DltGatewayService/ShowCredential',
            dlt__gateway__pb2.Request.SerializeToString,
            dlt__gateway__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateCredential(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dlt.DltGatewayService/CreateCredential',
            dlt__gateway__pb2.CredentialParam.SerializeToString,
            dlt__gateway__pb2.Credential.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RevokeCredential(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dlt.DltGatewayService/RevokeCredential',
            dlt__gateway__pb2.Request.SerializeToString,
            dlt__gateway__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RequestCredential(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dlt.DltGatewayService/RequestCredential',
            dlt__gateway__pb2.CredentialRequest.SerializeToString,
            dlt__gateway__pb2.Credential.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreatePresentation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dlt.DltGatewayService/CreatePresentation',
            dlt__gateway__pb2.PresentationParam.SerializeToString,
            dlt__gateway__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RequestAuthorization(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dlt.DltGatewayService/RequestAuthorization',
            dlt__gateway__pb2.AuthorizationRequest.SerializeToString,
            dlt__gateway__pb2.VerificationResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetNonce(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dlt.DltGatewayService/GetNonce',
            dlt__gateway__pb2.Request.SerializeToString,
            dlt__gateway__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def VerifyCredential(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dlt.DltGatewayService/VerifyCredential',
            dlt__gateway__pb2.Request.SerializeToString,
            dlt__gateway__pb2.VerificationResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListAuthorizationResults(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dlt.DltGatewayService/ListAuthorizationResults',
            dlt__gateway__pb2.Request.SerializeToString,
            dlt__gateway__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def FindLatestAuthorizationResult(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dlt.DltGatewayService/FindLatestAuthorizationResult',
            dlt__gateway__pb2.Request.SerializeToString,
            dlt__gateway__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
